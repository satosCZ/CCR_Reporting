@model Project_REPORT_v7.Models.MainTaskTable

@{
    ViewBag.Title = "Edit";
}

<script>
    $(function () {
        $("#System").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/MainTaskTables/GetSystem",
                    dataType: "json",
                    type: "POST",
                    data: {
                        term: request.term,
                        cnt: 5
                    },
                    success: function (data) {
                        console.log(data);
                        response($.map(data, function (item) {
                            return { label: item.System, value: item.System };
                        }))
                    }
                });
            },
            minLength: 2,
            select: function (event, ui) {
                console.log(ui);
            }
        });

        $("#Problem").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/MainTaskTables/GetProblem",
                    dataType: "json",
                    type: "POST",
                    data: {
                        term: request.term,
                        cnt: 5
                    },
                    success: function (data) {
                        console.log(data);
                        response($.map(data, function (item) {
                            return { label: item.Problem, value: item.Problem };
                        }))
                    }
                });
            },
            minLength: 2,
            select: function (event, ui) {
                console.log(ui);
            }
        });

        $("#Solution").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/MainTaskTables/GetSolution",
                    dataType: "json",
                    type: "POST",
                    data: {
                        term: request.term,
                        cnt: 5
                    },
                    success: function (data) {
                        console.log(data);
                        response($.map(data, function (item) {
                            return { label: item.Solution, value: item.Solution };
                        }))
                    }
                });
            },
            minLength: 2,
            select: function (event, ui) {
                console.log(ui);
            }
        });

        $("#radio input").checkboxradio({
            icon: false
        });

        Dropzone.autoDiscover = false;
        $("#dropzoneJsForm").dropzone({
            addRemoveLinks: true,
            dictMaxFilesExceeded: "Maximum upload limit reached",
            dictInvalidFileType: "File type not allowed, only JPG/PNG/BMP",
            acceptedFiles: ".jpg,.png,.bmp,.jpeg",
            maxFiles: 10,
            maxFilesize: 50,
            uploadMultiple: true,
            parallelUploads: 10,
            init: function () {
                this.on("Complete", function (data) {
                    var res = JSON.parse(data.xhr.responseText);
                });
            }
        });
    });
</script>

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
    <h3 class="text-center">Edit Main Task</h3>
</div>

@using (Html.BeginForm( "Edit", "MainTaskTables", FormMethod.Post, htmlAttributes: new { @id = "EditMainTask"}))
{
    @Html.AntiForgeryToken()

    <div class="modal-body">
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.MainTaskID)

            <div class="form-group">
                @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "control-label col-md-4 required" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control text-center" } })
                    <div>
                        @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-4 required" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control text-center" } })
                    <div>
                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Shop, htmlAttributes: new { @class = "control-label col-md-4 required" })
                <div class="col-md-8 clearfix">
                    <div class="btn-group" id="radio">
                        <label class="btn btn-default" for="HMMC">HMMC</label>
                        @Html.RadioButtonFor(model => model.Shop, "HMMC", htmlAttributes: new { @checked = "checked", @title = "HMMC", @id = "HMMC", @style = "visibility: hidden, width: 0, height: 0;" })
                        <label class="btn btn-default" for="GLOVIS">GLOVIS</label>
                        @Html.RadioButtonFor(model => model.Shop, "GLOVIS", htmlAttributes: new { @title = "GLOVIS", @id = "GLOVIS", @style = "visibility: hidden, width: 0, height: 0;" })
                        <label class="btn btn-default" for="TRANSYS">TRANSYS</label>
                        @Html.RadioButtonFor(model => model.Shop, "TRANSYS", htmlAttributes: new { @title = "TRANSYS", @id = "TRANSYS", @style = "visibility: hidden, width: 0, height: 0;" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.System, htmlAttributes: new { @class = "control-label col-md-4 required" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.System, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:capitalize" } })
                    <div>
                        @Html.ValidationMessageFor(model => model.System, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Problem, htmlAttributes: new { @class = "control-label col-md-4 required" })
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.Problem, htmlAttributes: new { @class = "form-control", @style="height:75px;", @autocapitalize="sentences"})
                    <div>
                        @Html.ValidationMessageFor(model => model.Problem, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Solution, htmlAttributes: new { @class = "control-label col-md-4 required" })
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.Solution, htmlAttributes: new { @class = "form-control", @style = "height:75px;", @autocapitalize="sentences" })
                    <div>
                        @Html.ValidationMessageFor(model => model.Solution, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Cooperation, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Cooperation, new { htmlAttributes = new { @class = "form-control" } })
                    <div>
                        @Html.ValidationMessageFor(model => model.Cooperation, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <p class="bg-warning">* - Required</p>
}
<hr />
<h6 class="text-center">Uploaded Images</h6>
<div class="alert alert-warning" role="alert">
    <p>ATENTION: By clicking on the picture it will permanently delete it form server. This action is irreversible!</p>
</div> 
<div class="image_container">
    @foreach( var image in Model.MT_IMAGES.Where( w => w.ReportID == Model.MainTaskID ))
    {
        <div class="image">
            <a class="link-image" href="@Url.Action("Delete", "MT_IMAGES", new { id = image.ImageID })" title="Delete Image" data-ajax="true" data-ajax-method="POST" data-ajax-confirm="Are you sure you want to delete this image?" data-ajax-success="DeleteImageSuccess" data-ajax-mode="after">
                <img src="@image.ImagePath" alt="@image.ImageID" title="Delete an image" class="crop img-thumbnail" />
            </a>
        </div>
    }
</div>
<hr />
<div class="jumbotron">
    @using (Html.BeginForm("UploadImage", "MT_IMAGES", new {mainTaskID = Model.MainTaskID}, FormMethod.Post, htmlAttributes: new { @class="dropzone", @id = "dropzoneJsForm", @style = "background-color:#00BFFF; min-width:50px; min-height: 25px;" } ))
    {
            
    }
</div>
    <div class="modal-footer">
        <span id="progress" class="text-center center-block">
            <img src="~/Content/Animation/Rhombus.gif" alt="Wait" />
            Wait...
        </span>
        @if (TempData.ContainsKey("ErrorMessage"))
        {
            <div id="error" class="panel-danger" aria-hidden="true">
                <p class="text-danger">@TempData["ErrorMessage"].ToString();</p>
            </div>
        }
        <input class="btn btn-primary" type="submit" value="Save" form="EditMainTask"/>
        <button class="btn btn-warning" data-dismiss="modal">Close</button>
    </div>


<script>
    $('form').removeData("validator").removeData("unobtrusiveValidation");
    $.validator.unobtrusive.parse($('form'));
</script>